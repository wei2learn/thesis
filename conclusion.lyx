#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\options amsthm,seceqn,secthm
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin9
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Conclusion
\begin_inset CommandInset label
LatexCommand label
name "sec:Future-Research"

\end_inset


\end_layout

\begin_layout Standard
In this thesis, we have presented efficient deterministic algorithms for
 a number of polynomial matrix computation problems, including the computation
 of order basis, minimal kernel basis, matrix inverse, column basis, unimodular
 completion, determinant, Hermite normal form, rank, and rank profile.
 The algorithm for kernel basis computation also immediately gives us a
 new way to solve linear systems.
 An existing efficient deterministic method for solving linear systems was
 given by 
\begin_inset CommandInset citation
LatexCommand citet
key "GSSV2012"

\end_inset

.
 The algorithm for column basis also immediately allows us to compute matrix
 GCD, column reduced forms and Popov normal forms for matrices of any dimension.
 
\end_layout

\begin_layout Standard
We first gave algorithms for computing a shifted order basis of an 
\begin_inset Formula $m\times n$
\end_inset

 matrix of power series over a field 
\begin_inset Formula $\mathbb{K}$
\end_inset

 with 
\begin_inset Formula $m\le n$
\end_inset

.
 For a given order 
\begin_inset Formula $\sigma$
\end_inset

 and balanced shift 
\begin_inset Formula $\vec{s}$
\end_inset

 the first algorithm determines an order basis with a cost of 
\begin_inset Formula $O^{\sim}(n^{\omega}a)$
\end_inset

 field operations in 
\begin_inset Formula $\mathbb{K}$
\end_inset

, where 
\begin_inset Formula $a=m\sigma/n.$
\end_inset

 We then provided a method to refine the cost to 
\begin_inset Formula $O^{\sim}(n^{\omega-1}m\sigma)$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Here $O^{
\backslash
sim}$
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%is just $O$ with log factors omitted and 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%$
\backslash
MM
\backslash
left(n,d
\backslash
right)$ denotes
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%the cost of multiplying two polynomial matrices with dimension $n$
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%and degree $d$.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
This extends earlier work of Storjohann which only determines a subset of
 an order basis that is within a specified degree bound 
\begin_inset Formula $\delta$
\end_inset

 using 
\begin_inset Formula $O^{\sim}(n^{\omega}\delta)$
\end_inset

 field operations for 
\begin_inset Formula $\delta\ge\lceil m\sigma/n\rceil$
\end_inset

.
\end_layout

\end_inset

 While the first algorithm addresses the case when the column degrees of
 a complete order basis are unbalanced given a balanced input shift, it
 is not efficient in the case when an unbalanced shift results in the row
 degrees also becoming unbalanced.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%The column degrees of a complete basis may be unbalanced, which is
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%a major issue we address in the first algorithm.
 When the input shift
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%is unbalanced, the row degrees of the basis can also be unbalanced
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%in addition to the unbalanced column degrees.
 For this, we present
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

We have presented a second algorithm which balances the high degree rows
 and computes an order basis also using 
\begin_inset Formula $O^{\sim}(n^{\omega}a)$
\end_inset

 field operations in the case that the shift is unbalanced but satisfies
 the condition 
\begin_inset Formula $\sum_{i=1}^{n}(\max(\vec{s})-\vec{s}_{i})\le m\sigma$
\end_inset

.
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Every problem with any unbalanced shift can be in fact reduced to a problem
 with a shift that satisfying this condition if the degrees of a resulting
 order basis is known.
 
\end_layout

\end_inset

 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Many unbalanced shift problems can be in fact converted to problems satisfying
 this condition.
 
\end_layout

\end_inset

 This condition essentially allows us to locate those high degree rows that
 need to be balanced.
 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
In more general unbalanced shift cases, this algorithm may not work well
 directly since we do not know in advance which are the high degree rows
 need to be balanced.
 But it may work efficiently if we have an effective way of estimating the
 resulting row degrees.
 
\end_layout

\end_inset

 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
This extends the earlier work by the authors from ISSAC'09.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We then presented an algorithm for the computation of a minimal kernel basis
 of an 
\begin_inset Formula $m\times n$
\end_inset

 input matrix of univariate polynomials over a field 
\begin_inset Formula $\mathbb{K}$
\end_inset

 with 
\begin_inset Formula $m\le n$
\end_inset

.
 This algorithm computes a minimal kernel basis of a degree 
\begin_inset Formula $d$
\end_inset

 input matrix with a cost of 
\begin_inset Formula $O^{\sim}\left(n^{\omega-1}md\right)$
\end_inset

 field operations in 
\begin_inset Formula $\mathbb{K}$
\end_inset

.
 
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Here the soft-
\begin_inset Formula $O$
\end_inset

 notation is Big-
\begin_inset Formula $O$
\end_inset

 with log factors removed while 
\begin_inset Formula $\omega$
\end_inset

 is the exponent of matrix multiplication.
\end_layout

\end_inset

 The same algorithm also works in the more general situation on computing
 a shifted minimal kernel basis, with a given degree shift 
\begin_inset Formula $\vec{s}\in\mathbb{Z}^{n}$
\end_inset

 whose entries bound the corresponding column degrees of the input matrix.
 In this case a 
\begin_inset Formula $\vec{s}$
\end_inset

-minimal right kernel basis can be computed with a cost of 
\begin_inset Formula $O^{\sim}(n^{\omega}s)$
\end_inset

 field operations, where 
\begin_inset Formula $s$
\end_inset

 is the average of the largest 
\begin_inset Formula $m$
\end_inset

 entries of 
\begin_inset Formula $\vec{s}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Order basis computation and kernel basis computation were then applied to
 the remaining problems.
 An algorithm for computing the inverse of an matrix in 
\begin_inset Formula $\mathbb{K}\left[x\right]^{n\times n}$
\end_inset

 was then given with a cost of 
\begin_inset Formula $O^{\sim}\left(n^{3}s\right)$
\end_inset

 field operations, where 
\begin_inset Formula $s$
\end_inset

 is the average of the column or row degrees of the input matrix.
 The inverse represented alternatively by a product of 
\begin_inset Formula $\left\lceil \log n\right\rceil $
\end_inset

 matrices costs only 
\begin_inset Formula $O^{\sim}\left(n^{\omega}s\right)$
\end_inset

 to compute.
 We then discussed the computation of a column basis of an input matrix
 in 
\begin_inset Formula $\mathbb{K}\left[x\right]^{m\times n}$
\end_inset

 with a cost of 
\begin_inset Formula $O^{\sim}\left(m^{\omega}ns\right)$
\end_inset

, where 
\begin_inset Formula $s$
\end_inset

 is again the average column degree of the input matrix.
 Next, an algorithm was presented for computing an unimodular completion
 of an input matrix in 
\begin_inset Formula $\mathbb{K}\left[x\right]^{m\times n}$
\end_inset

, 
\begin_inset Formula $m<n$
\end_inset

 with a cost of 
\begin_inset Formula $O^{\sim}\left(n^{\omega}s\right)$
\end_inset

, where 
\begin_inset Formula $s$
\end_inset

 is the average of the 
\begin_inset Formula $m$
\end_inset

 largest column degrees of the input matrix.
 Then an algorithm for computing the determinant of an input matrix in 
\begin_inset Formula $\mathbb{K}\left[x\right]^{n\times n}$
\end_inset

 with a cost of 
\begin_inset Formula $O^{\sim}\left(n^{\omega}s\right)$
\end_inset

 was given, where 
\begin_inset Formula $s$
\end_inset

 is the average column or row degree of the input matrix.
 Then we looked at an algorithm for computing the Hermite normal form of
 a degree 
\begin_inset Formula $d$
\end_inset

 input matrix in 
\begin_inset Formula $\mathbb{K}\left[x\right]^{n\times n}$
\end_inset

 with a cost of 
\begin_inset Formula $O^{\sim}\left(n^{\omega}d\right)$
\end_inset

.
 Finally, we provided algorithms for rank-sensitive computations of the
 rank and rank profile of an input matrix in 
\begin_inset Formula $\mathbb{K}\left[x\right]^{m\times n}$
\end_inset

 with a cost of 
\begin_inset Formula $O^{\sim}\left(mr^{\omega-2}ns\right)$
\end_inset

, where 
\begin_inset Formula $s$
\end_inset

 is the average column degree of the input matrix, and then applied the
 rank profile algorithm to rank-sensitive computation of minimal kernel
 basis to obtain a cost of 
\begin_inset Formula $O^{\sim}(nmr^{\omega-2}d+n^{\omega-1}rd)$
\end_inset

.
\end_layout

\begin_layout Standard
We reduce all these problems to polynomial matrix multiplications.
 The computational costs of our algorithms are then similar to the costs
 of multiplying matrices, whose dimensions match the input matrix dimensions
 in the original problems, and whose degrees equal the average column degrees
 of the original input matrices in most cases.
 The use of the average column degrees instead of the commonly used matrix
 degrees, or equivalently the maximum column degrees, makes our computational
 costs more precise and tighter.
 In addition, the shifted minimal bases computed by our algorithms are more
 general than the standard minimal base.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
We first presented 
\end_layout

\begin_layout Plain Layout
The algorithms in this thesis give fast procedures for efficiently computing
 order bases and nullspace bases.
  However a number of problems remain to be solved.
 In particular, the efficient computation of order basis with a general
 unbalanced shift remains an open problem.
 In addition, order bases are closely related to many other problems in
 polynomial matrix computation, for example nullspace basis and matrix normal
 forms.
 We are interested in seeing how our tools can be used to solve these problems
 more efficiently.
 Our work assumes that we are working with polynomials and power series
 represented in standard bases.
 We would like to obtain efficient methods for computation of order bases
 represented in arbitrary bases, particularly those associated to interpolation
 bases.
 Finally, the constructions used in this paper assume exact arithmetic where
 coefficient growth is not an issue.
 We are interested in determining how our tools can be used with methods
 such as fraction-free or modular construction of order bases, particularly
 combining the constructions found in 
\begin_inset CommandInset citation
LatexCommand citep
key "BL2000"

\end_inset

.
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Section
Future Work
\end_layout

\begin_layout Plain Layout
The algorithms for computing column reduced form and Hermite normal form
 are still not quite as nice as the algorithms for other problems.
 They are still more complicated and their complexity 
\begin_inset Formula $O^{\sim}\left(n^{\omega}d\right)$
\end_inset

 are only stated in the matrix degree 
\begin_inset Formula $d$
\end_inset

 instead of the more refined complexity 
\begin_inset Formula $O^{\sim}\left(n^{\omega-1}\xi\right)$
\end_inset

 using the sum of the column degrees 
\begin_inset Formula $\xi$
\end_inset

.
 With the tools developed in this thesis, we believe better algorithms for
 these problems are now within our reach.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
